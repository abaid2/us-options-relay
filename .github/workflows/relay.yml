name: Relay (Tradier to Gists — fast)

on:
  schedule:
    - cron: "*/5 * * * *"   # run every 5 minutes (UTC)
  workflow_dispatch:

concurrency:
  group: relay-only
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests

      - name: Check required secrets
        env:
          TRADIER_TOKEN:    ${{ secrets.TRADIER_TOKEN }}
          FINNHUB_TOKEN:    ${{ secrets.FINNHUB_TOKEN }}
          GIST_TOKEN:       ${{ secrets.GIST_TOKEN }}
          GIST_ID_CALENDAR: ${{ secrets.GIST_ID_CALENDAR }}
          GIST_ID_MARKET:   ${{ secrets.GIST_ID_MARKET }}
          GIST_ID_HISTORY:  ${{ secrets.GIST_ID_HISTORY }}
        shell: bash
        run: |
          set -e
          missing=0
          for k in TRADIER_TOKEN FINNHUB_TOKEN GIST_TOKEN GIST_ID_CALENDAR GIST_ID_MARKET GIST_ID_HISTORY; do
            if [ -z "${!k}" ]; then
              echo "::error title=$k missing::$k is NOT set"
              missing=1
            else
              echo "$k=SET"
            fi
          done
          [ "$missing" -eq 0 ]

      - name: Skip if feeds are fresh (≤4m market, ≤10m calendar)
        id: freshness
        env:
          GIST_TOKEN:       ${{ secrets.GIST_TOKEN }}
          GIST_ID_CALENDAR: ${{ secrets.GIST_ID_CALENDAR }}
          GIST_ID_MARKET:   ${{ secrets.GIST_ID_MARKET }}
        shell: bash
        run: |
          set -e
          python - <<'PY'
          import os, json, urllib.request, datetime as dt
          out_path = os.environ["GITHUB_OUTPUT"]
          hdr = {"Authorization": f"Bearer {os.environ['GIST_TOKEN']}",
                 "Accept": "application/vnd.github+json"}
          def fetch_ts(gist_id, name):
            try:
              req = urllib.request.Request(f"https://api.github.com/gists/{gist_id}", headers=hdr)
              with urllib.request.urlopen(req, timeout=20) as r:
                j = json.load(r)
              return json.loads(j["files"][name]["content"])["meta"]["updated_utc"]
            except Exception:
              return ""
          def to_epoch(s):
            try:
              if s.endswith("Z"): s = s[:-1] + "+00:00"
              return int(dt.datetime.fromisoformat(s).timestamp())
            except Exception:
              return 0
          now = int(dt.datetime.now(dt.timezone.utc).timestamp())
          cal_ts = fetch_ts(os.environ["GIST_ID_CALENDAR"], "calendar.json")
          mkt_ts = fetch_ts(os.environ["GIST_ID_MARKET"],   "market.json")
          cal_age = now - to_epoch(cal_ts)
          mkt_age = now - to_epoch(mkt_ts)
          print(f"calendar age: {cal_age}s")
          print(f"market   age: {mkt_age}s")
          skip = (mkt_age < 240 and cal_age < 600)
          with open(out_path, "a") as f:
            f.write(f"skip={'true' if skip else 'false'}\n")
          PY

      - name: Run relay
        if: ${{ steps.freshness.outputs.skip != 'true' }}
        env:
          TRADIER_TOKEN:    ${{ secrets.TRADIER_TOKEN }}
          FINNHUB_TOKEN:    ${{ secrets.FINNHUB_TOKEN }}
          GIST_TOKEN:       ${{ secrets.GIST_TOKEN }}
          GIST_ID_CALENDAR: ${{ secrets.GIST_ID_CALENDAR }}
          GIST_ID_MARKET:   ${{ secrets.GIST_ID_MARKET }}
          GIST_ID_HISTORY:  ${{ secrets.GIST_ID_HISTORY }}
          TRADIER_BASE: https://api.tradier.com/v1
          INTERVAL_SEC: "300"     # tag only; cron cadence controls runs
          RELAY_WORKERS: "8"      # parallel per-symbol work (ThreadPool)
          TIERB_LIMIT: "40"       # optional cap on Tier-B symbols during heavy weeks
        run: python relay_us_options_tradier.py
